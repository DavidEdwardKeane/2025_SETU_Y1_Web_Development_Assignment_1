:root { /* set up a bunch of reusable stuff. use them later in var() */
    --transparentElement: 73%;
    --bgTransparency: 62%;

    /*colo*u*rs - if don't spell it wrong twice, you're not doing CSS */
    /* using coolors.co to choose. */
    --night: hsla(240, 54%, 3%, 1);
    --starglow: hsla(348, 14.7%, 13%, var(--transparentElement));

    --highlight: hsla(354, 100%, 96%, 1);
    --accent: hsla(44.9, 96.6%, 53.3%, 1);
    --link: hsla(210 , 99%, 80%, 1);

}

/* Resets for consistency */
* {
    margin: 0;
}
ul {
    list-style: none;
}

body { /* setting the grid here instead of an extra div */
    /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Basic_concepts_of_grid_layout */
    display: grid;
    grid-template-columns: 3fr 8fr 2fr 3fr; /* make sure theres a bit of space around the content */
    grid-auto-rows: minmax(8rem, auto); /* give a minimum height to our rows */
    grid-template-rows: 1fr min-content;
    height: 100vh;

    color: var(--highlight);
    line-height: 1.7; /* Give text more space */
    font-family: "Open Sans", sans-serif;
    background-image: url(../img/webb.jpg); /* up one directory to assets, then into images */
    background-repeat: no- - Homerepeat;
    background-size: cover;
}
body:before { /* want to add a layer to hide the image */
    content: ""; /* to use a psuedo element, you must first declare that it has content. Null string is content. */
    display: block;
    position: fixed;
    width: 100vw;
    height: 100vh;
    left: 0;
    top: 0;
    z-index: -1;
    background-color: var(--night);
    opacity: var(--bgTransparency);
}

a {
    padding: 0.1rem 0.4rem;
    border-radius: 0.2rem;
    text-decoration: none;
    border: 1px solid var(--link);

    color: var(--link);
    transition: all 0.4s ease-in;

}
a:hover {
    color: var(--highlight);
    border-color: var(--highlight); /* only need to override the specific attribue, so do that */
}

header {
    grid-column: 1 / 5;
    grid-row: 1 / 2;

    display: flex;
    flex-direction: column;
    align-content: center;
    align-items: center;

    margin-top: 1rem;
}
.topMenu {
    display: flex;
    flex-direction: row;
}
.topMenu li {
    margin: 3rem 1rem;
}

main {
    grid-column: 2 / 3;
    grid-row: 2 / 3;

    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
}
.mainImage {
    grid-column: 1 / 3;
    grid-row: 1 / 4;

    max-width: 30vw;
    align-self: center;
    opacity: var(--transparentElement);
}
.introduction {
    grid-column: 3 / 4;
    grid-row: 1 / 2;

    padding-top: 1rem;
}
.data {
    grid-column: 3 / 4;
    grid-row: 2 / 3;
    align-self: center;
}
.more {
    grid-column: 3 / 4;
    grid-row: 3 / 4;
    align-self: end;

    color: var(--accent);
    border: var(--accent);
    display: flex;
    flex-direction: column;
    margin-right: 2rem;
    line-height: 2.1;
}


aside {
    grid-column: 3 / 4;
    grid-row: 2 / 3;

    margin: 0 1rem;
    padding: 1rem;
    background: var(--starglow);
    border-radius: 0.2rem;
}

footer {
    grid-column: 2 / 4;
    grid-row: 3 / 4;
    align-self: end;

    display: flex;
    justify-content: space-between;
    padding-bottom: 1rem;
    margin: 0 1rem;
}
footer:first-child {
    align-self: start;
}

.footerLink {
    margin-left: 0.2rem;
}

.active a {
    color: var(--accent);
    border-color: var(--accent);
}

h1, a {
    font-family: "Roboto Mono", monospace;
}

.inlineHeading {
    font-weight: bold;
}

.accent {
    color: var(--accent);
}

.introduction p:not(:last-child) {
    margin-bottom: 1rem;
}





